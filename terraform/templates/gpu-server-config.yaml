#cloud-config

# Execute System Updates
package_update: true
package_upgrade: true

# Install required packages
packages:
  - ca-certificates
  - curl

# Install Docker, Nvidia Container Toolkit, GPU Drivers, CUDA, inject config and startup script
runcmd:
  - |
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    chmod a+r /etc/apt/keyrings/docker.asc
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "$${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt update
    apt -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
    && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
    tee /etc/apt/sources.list.d/nvidia-container-toolkit.list

    apt update
    apt -y install nvidia-container-toolkit
    nvidia-ctk runtime configure --runtime=docker
    systemctl restart docker

    apt -y install linux-headers-$(uname -r)
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb
    dpkg -i cuda-keyring_1.1-1_all.deb
    apt update
    apt -y install nvidia-open
    apt -y install cuda-drivers

    jupyter_dir="/opt/jupyter-stack"
    mkdir -p $${jupyter_dir}
    curl https://akamai-presentations.us-southeast-1.linodeobjects.com/jupyter-stack/docker-compose.yaml -o $${jupyter_dir}/docker-compose.yaml
    curl https://akamai-presentations.us-southeast-1.linodeobjects.com/jupyter-stack/main.sh -o $${jupyter_dir}/main.sh
    chmod +x $${jupyter_dir}/main.sh

    cat > $${jupyter_dir}/vars.sh <<EOF
    export PROJECT_NAME="${project_name}"
    export NOTEBOOK_DATA_VOLUME_NAME="${notebook_data_volume_name}"
    export CERT_VOLUME_NAME="${cert_volume_name}"
    export SSL_CERT_FQDN="${ssl_cert_fqdn}"
    export SSL_CERT_EMAIL="${ssl_cert_email}"
    export JUPYTER_LAB_HOST_PORT="${jupyter_lab_host_port}"
    export JUPYTER_LAB_WEB_PWD="${jupyter_lab_web_pwd}"
    EOF

    cat > /etc/rc.local <<'EOF'
    #!/usr/bin/env bash

    jupyter_dir="/opt/jupyter-stack"
    container_name="${project_name}"
    logfile="$${jupyter_dir}/rclocal_stdoutlog.txt"

    echo "$(date '+%Y-%m-%d %H:%M:%S') starting script" | tee -a $${logfile}

    cd $${jupyter_dir}

    if [ "$(docker ps -a | grep -Po $${container_name})" == "$${container_name}" ];
      then
        echo "$(date '+%Y-%m-%d %H:%M:%S') container exists, exiting script" | tee -a $${logfile}
        exit 0
      else
        echo "$(date '+%Y-%m-%d %H:%M:%S') starting container $${container_name}" | tee -a $${logfile}
        ./main.sh > /opt/jupyter-stack/main_stdoutlog.txt 2> /opt/jupyter-stack/main_errlog.txt
        echo "$(date '+%Y-%m-%d %H:%M:%S') done starting container" | tee -a $${logfile}
    fi
    EOF

    chmod +x /etc/rc.local

    reboot